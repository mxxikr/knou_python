# ============ 틱택토 게임 설계 ===============
# 1. 2차원 리스트를 사용하여 게임판을 생성하고 각각의 칸을 빈칸으로 초기화
#     - 빈칸에 대한 지정한 기호(*)를 사용
# 2. 게임판에 빈칸이 남아있는지 확인
#     - 게임판 전체를 확인하고 True/False 반환
# 3. 둘 중 한 플레이어가 승리했는지 확인
#     - 8가지의 승리 상황에 따른 가능성을 확인
#     - 각각의 행, 열과 두 개의 대각선 방향을 확인
# 4. 게임판의 현재 상태를 출력
# 5. 게임 시작
#     - 무작위로 선공할 플레이어를 선택
#     - 게임 루프를 기동
#     - 게임 판의 현재 상태를 출력하고 다음 플레이어가 빈칸을 선택
#     - 플레이어가 선택할 빈칸의 위치(행과 열 번호)를 입력 받음
#         - 사용자일 경우 사용자 입력을 통해 행과 열 번호를 입력 받음
#         - 컴퓨터일 경우 무작위로 행과 열 번호를 선택
#     - 플레이어가 선택한 위치에 기호를 표시하고 게임 판을 업데이트
#     - 현재 플레이어가 승리했는지 확인
#         - 승리 상황인 경우, 승리한 플레이어에 대한 메시지를 출력하고 게임 루프를 종료
#     - 게임 판에 빈칸이 남아있는지 확인
#         - 게임 판이 가득찬 경우, 무승부 메시지를 출력하고 게임 루프를 종료

class Tic_Tac_Toe:

    # 게임판 생성
    def __init__(self): # 게임이 실행되자마자 생성되어야 하는 부분
        pass
    # 게임판 초기화
    def create_board(self):
        pass
    # 첫 플레이어 선택
    def select_first_player(self):
        pass

    # 기호 표시
    def mark_spot(self, row, col, player):
        pass
    # 승리 상태 확인
    def is_win(self, player):
        pass
        # 행 확인
        # 열 확인 
        # 대각선 확인

    # 잔여 빈칸 여부 확인
    def is_board_full(self):
        pass

    # 플레이어 변경
    def next_player(self, player):
        pass

    # 현재 게임판 상태 츌력
    def show_board(self): # 지금까지 입력 된 게임 판의 상태를 보여 주는 것
        pass

    # 게임 루프 시작
    def start(self):
        pass

        # 새 게임판 생성

        # 첫 플레이어 선택

        # 게임 루프 시작
        while True:
            # 다음 플레이어 안내
            pass

            # 현재 게임판 상태 출력

            # 사용자 입력 대기, 컴퓨터일 경우 랜덤 위치 반환

            # row, col 입력값이 0, 0인 경우 게임 종료
            
            # 입력된 위치 표시

            # 현재 플레이어가 이겼는지 확인 

            # 게임판 가득참 확인

            # 플레이어 변경

        # 최종 게임판 출력


# 게임 생성
TTT = Tic_Tac_Toe()

# 게임 시작
TTT.start()